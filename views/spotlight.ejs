<!DOCTYPE html>
<html lang="en">

<head>
    <title>Openskies Flight Spotlight</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link href='https://fonts.googleapis.com/css?family=Karla' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet' type='text/css'>

    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">
    

    <link rel="stylesheet" href="/assets/js/humane/flatty.css">

    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    
    
    <script type="text/javascript" src="/assets/js/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js">
    </script>
    <script src="/assets/Build/Cesium/Cesium.js"></script>
    <style>
        @import url(/assets/Build/Cesium/Widgets/widgets.css);
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">

            <div class="col-sm-2 col-md-2 main">

                <h1 class="page-header">Flight Spotlight</h1>
                <section class="information">
                    Welcome <%= userProfile.email %> (<a href="/logout">logout</a>)
                    <hr>
          
                    <form id="dss-query-form" method="post" action="/spotlight">
                        
                       
                          <label for="geo_polygon_string">Area of Interest</label>
                          <textarea rows="4" cols="20" id="geo_polygon_string" value="<%= data.geo_polygon_string %>" name="geo_polygon_string" placeholder="Paste a valid GeoJSON of the area of interest here."></textarea>
                       
                          <br><br>
                        <div class="form-actions">
                            <button class="button" id="retrive_flights" type="submit">Stream flights</button>
                        </div>
                      </form>
                      <br>
                       <div class="d-none loading-spinner" id="spinner-cont">
                        <img src="/assets/img/spinner.gif" height="40px">
                       </div>
                      <hr><br>


                    <div id="toolbar">
                        <h4>Basemap</h4>
                        <table>
                            <tbody data-bind="foreach: layers">
                                <tr data-bind="css: { up: $parent.upLayer === $data, down: $parent.downLayer === $data }">

                                    <td>
                                        <span data-bind="text: name, visible: !$parent.isSelectableLayer($data)"></span>
                                        <select data-bind="visible: $parent.isSelectableLayer($data), options: $parent.baseLayers, optionsText: 'name', value: $parent.selectedLayer"></select>
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        </div>


                </section>
            </div>

            <div class="col-sm-10 col-md-10 sidebar">
                <div id="cesiumContainer"></div>
            </div>
        </div>
    </div>

    <script>
        var socketHost = location.origin.replace(/^http/, 'ws');
        
        const email  = '<%= userProfile.displayName %>';
        var socket = io.connect(socketHost);
        socket.on('connect_failed', function() {
            errorMsg('Data connection failed, please contact your administrator.');
        });
        socket.on('disconnect', function() {
            console.log('disconnected');
        });
        socket.on('welcome', function(msg) {
            console.log('Welcome message:', msg);
        });
        socket.on('connect', function() {
            socket.emit('room', email);
        });
        socket.on('connect_timeout', function() {
            console.log("timed out");

        });
        socket.on('message', function(flight_data) {
            
            if(flight_data.type =='message') {
                
                    const cur_result = flight_data.results.object;
                    console.log(flight_data)
                    // console.log(Math.floor(Date.now() / 1000) +":  " + cur_result.coordinates[1], cur_result.coordinates[0], cur_result.coordinates[2]);
                    
                        viewer.entities.add({
                            position : Cesium.Cartesian3.fromDegrees(cur_result.coordinates[1], cur_result.coordinates[0], cur_result.coordinates[2]),
                            point : {
                                pixelSize : 5,
                                color : Cesium.Color.RED,
                                outlineWidth:0
                            }
                    });
            }
            else if (flight_data.type =='progress'){
                console.log(flight_data.percentcomplete);
                
            }
        });
        
        
        var mapbox = new Cesium.MapboxImageryProvider({
            mapId: 'cygnus2936.curedn3y',
            accessToken: '<%= mapbox_key %>'
        });
        var bing = new Cesium.BingMapsImageryProvider({
            url: 'https://dev.virtualearth.net',
            key: '<%= bing_key %>',
            mapStyle: Cesium.BingMapsStyle.AERIAL
        });
        
        var viewer = new Cesium.Viewer('cesiumContainer', {
            "geocoder": false,
            "homeButton": false,
            "baseLayerPicker": false,
            "infoBox": false,
            "sceneModePicker": false,
            "animation": false,
            "selectionIndicator": false,
            "fullscreenButton": false,
            "timeline": false,
            "navigationHelpButton": false,
        });
        
        var imageryLayers = viewer.imageryLayers;
        var scene = viewer.scene;
        var clock = viewer.clock;
        var camera = viewer.camera;

        var cameralat;
        var cameralng;

        var viewModel = {
            layers: [],
            baseLayers: [],
            upLayer: null,
            downLayer: null,
            selectedLayer: null,
            isSelectableLayer: function(layer) {
                return baseLayers.indexOf(layer) >= 0;
            }
        };

        function setupLayers() {
            // Create all the base layers that this example will support.
            // These base layers aren't really special.  It's possible to have multiple of them
            // enabled at once, just like the other layers, but it doesn't make much sense because
            // all of these layers cover the entire globe and are opaque.
            addBaseLayerOption('----', undefined); // the current base layer
            addBaseLayerOption('Bing Maps Aerial', bing); // the current base layer
            addBaseLayerOption('Mapbox Streets', mapbox);

        }
        Cesium.knockout.track(viewModel);

        function addBaseLayerOption(name, imageryProvider) {
            var layer;
            if (typeof imageryProvider === 'undefined') {
                layer = imageryLayers.get(0);
                viewModel.selectedLayer = layer;
            } else {
                layer = new Cesium.ImageryLayer(imageryProvider);
            }

            layer.name = name;
            baseLayers.push(layer);
        }
        var baseLayers = viewModel.baseLayers;

        function updateLayerList() {
            var numLayers = imageryLayers.length;
            viewModel.layers.splice(0, viewModel.layers.length);
            for (var i = numLayers - 1; i >= 0; --i) {
                viewModel.layers.push(imageryLayers.get(i));
            }
        }

        setupLayers();
        updateLayerList();
        var toolbar = document.getElementById('toolbar');
        Cesium.knockout.applyBindings(viewModel, toolbar);

        Cesium.knockout.getObservable(viewModel, 'selectedLayer').subscribe(function(baseLayer) {
            // Handle changes to the drop-down base layer selector.
            var activeLayerIndex = 0;
            var numLayers = viewModel.layers.length;
            for (var i = 0; i < numLayers; ++i) {
                if (viewModel.isSelectableLayer(viewModel.layers[i])) {
                    activeLayerIndex = i;
                    break;
                }
            }
            var activeLayer = viewModel.layers[activeLayerIndex];
            var show = activeLayer.show;
            var alpha = activeLayer.alpha;
            imageryLayers.remove(activeLayer, false);
            imageryLayers.add(baseLayer, numLayers - activeLayerIndex - 1);
            baseLayer.show = show;
            baseLayer.alpha = alpha;
            updateLayerList();
        });

        function coordsToDegreesArray(coords) {
            var degreesArray = [];
            const clen = coords.length;
            for (var x = 0; x < clen; x++) {
                var curCoords = coords[x];
                degreesArray.push(curCoords[0]);
                degreesArray.push(curCoords[1]);
            }
            return degreesArray;
        }



        function hexToRgb(hex) {
            // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function(m, r, g, b) {
                return r + r + g + g + b + b;
            });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
     



        const dss_form = $('#dss-query-form');
        dss_form.on('submit', submitHandler);
        function submitHandler (e) {
        e.preventDefault();
        var data = {};
        let geo_json = document.getElementById('geo_polygon_string').value;
        data['geo_json']  = geo_json;
        data['email'] = email;
        
        $.ajax({
            url: '/spotlight',
            type:'POST',
            data: data
        }).done(response => {
               let aoi =  viewer.dataSources.add(Cesium.GeoJsonDataSource.load(JSON.parse(geo_json), {
                        stroke: Cesium.Color.HOTPINK,
                        fill: Cesium.Color.PINK.withAlpha(0.5),
                        strokeWidth: 3
                    }));

                viewer.flyTo(aoi);

                $("#spinner-cont").removeClass('d-none');
                 humane.log("Scanning flights in AOI",{
                addnCls: 'humane-flatty-success'
            });


        }).fail(error => {
            if (error.status ==422)
            {
                humane.log("Invalid GeoJSON provided",{
                addnCls: 'humane-flatty-error'
            });
            }
            console.log(error);
        })
        }
    </script>
</body>

</html>